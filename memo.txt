@SqlResultSetMappings({
    @SqlResultSetMapping(
        name="productStats",
        classes = {
            @ConstructorResult(
                targetClass = ProductDownloadStatisticsDto.class,
                columns = {
                    @ColumnResult(name = "cate_name", type = String.class),
                    @ColumnResult(name = "product_name", type = String.class),
                    @ColumnResult(name = "product_down_total", type = Long.class)
                }
            )
        }
    ),
    @SqlResultSetMapping(
        name="storeWithProductStats",
        classes = {
            @ConstructorResult(
                targetClass = ProductDownloadStatisticsDto.class,
                columns = {
                    @ColumnResult(name = "store_name", type = String.class),
                    @ColumnResult(name = "cate_name", type = String.class),
                    @ColumnResult(name = "product_name", type = String.class),
                    @ColumnResult(name = "product_down_total", type = Long.class)
                }
            )
        }
    )
})
@NamedNativeQueries({
    @NamedNativeQuery(
        name = "ProductDownloadHistory.getProductStats",
        query = "SELECT " +
                "cate_desc.name as cate_name," +
                "prd_desc.name as product_name, " +
                "drvn.product_down_total as product_down_total " +
                "FROM " +
                "( " +
                "SELECT product_id, count(id) as product_down_total " +
                "FROM hcas_product_download_hist " +
                "WHERE created_date between :fromDate AND :toDate " +
                "GROUP BY product_id" +
                ")as drvn " +
                "INNER JOIN hcas_product_description prd_desc " +
                "ON drvn.product_id = prd_desc.product_id " +
                "and prd_desc.lang_key = :langKey " +
                "INNER JOIN hcas_product_to_category prdtocate " +
                "ON drvn.product_id = prdtocate.product_id " +
                "INNER JOIN hcas_category_description cate_desc " +
                "ON prdtocate.category_id = cate_desc.category_id " +
                "AND cate_desc.lang_key = :langKey " +
                "GROUP BY " +
                "cate_name," +
                "product_name, " +
                "product_down_total",
        resultSetMapping = "productStats"
    ),
    @NamedNativeQuery(
        name = "ProductDownloadHistory.getStoreWithProductStats",
        query = "SELECT store_desc.name as store_name," +
                "cate_desc.name as cate_name," +
                "prd_desc.name as product_name, " +
                "drvn.product_down_total " +
                "FROM " +
                "( " +
                "SELECT store_id, product_id, count(id) as product_down_total " +
                "FROM hcas_product_download_hist " +
                "WHERE created_date between :fromDate AND :toDate " +
                "GROUP BY store_id, product_id " +
                ")as drvn " +
                "INNER JOIN hcas_product_description prd_desc " +
                "ON drvn.product_id = prd_desc.product_id " +
                "and prd_desc.lang_key = :langKey " +
                "INNER JOIN hcas_store_description store_desc " +
                "ON drvn.store_id = store_desc.store_id " +
                "AND store_desc.lang_key = :langKey " +
                "INNER JOIN hcas_product_to_category prdtocate " +
                "ON drvn.product_id = prdtocate.product_id " +
                "INNER JOIN hcas_category_description cate_desc " +
                "ON prdtocate.category_id = cate_desc.category_id " +
                "AND cate_desc.lang_key = :langKey " +
                "GROUP BY " +
                "store_name," +
                "cate_name," +
                "product_name, " +
                "drvn.product_down_total",
        resultSetMapping = "storeWithProductStats"
    ),
    @NamedNativeQuery(
        name = "ProductDownloadHistory.getProductStatsByCategory",
        query = "SELECT " +
            "cate_desc.name as cate_name," +
            "prd_desc.name as product_name, " +
            "drvn.product_down_total as product_down_total " +
            "FROM " +
            "( " +
            "SELECT product_id, count(id) as product_down_total " +
            "FROM hcas_product_download_hist " +
            "WHERE created_date between :fromDate AND :toDate " +
            "GROUP BY product_id" +
            ")as drvn " +
            "INNER JOIN hcas_product_description prd_desc " +
            "ON drvn.product_id = prd_desc.product_id " +
            "and prd_desc.lang_key = :langKey " +
            "INNER JOIN hcas_product_to_category prdtocate " +
            "ON drvn.product_id = prdtocate.product_id " +
            "AND prdtocate.category_id = :categoryId " +
            "INNER JOIN hcas_category_description cate_desc " +
            "ON prdtocate.category_id = cate_desc.category_id " +
            "AND cate_desc.lang_key = :langKey " +
            "GROUP BY " +
            "cate_name," +
            "product_name, " +
            "product_down_total",
        resultSetMapping = "productStats"
    ),
    @NamedNativeQuery(
        name = "ProductDownloadHistory.getStoreWithProductStatsByStoreIdAndCategoryId",
        query = "SELECT store_desc.name as store_name," +
            "cate_desc.name as cate_name," +
            "prd_desc.name as product_name, " +
            "drvn.product_down_total " +
            "FROM " +
            "( " +
            "SELECT store_id, product_id, count(id) as product_down_total " +
            "FROM hcas_product_download_hist " +
            "WHERE created_date between :fromDate AND :toDate " +
            "AND store_id = :storeId " +
            "GROUP BY store_id, product_id " +
            ")as drvn " +
            "INNER JOIN hcas_product_description prd_desc " +
            "ON drvn.product_id = prd_desc.product_id " +
            "and prd_desc.lang_key = :langKey " +
            "INNER JOIN hcas_store_description store_desc " +
            "ON drvn.store_id = store_desc.store_id " +
            "AND store_desc.lang_key = :langKey " +
            "INNER JOIN hcas_product_to_category prdtocate " +
            "ON drvn.product_id = prdtocate.product_id " +
            "AND prdtocate.category_id = :categoryId " +
            "INNER JOIN hcas_category_description cate_desc " +
            "ON prdtocate.category_id = cate_desc.category_id " +
            "AND cate_desc.lang_key = :langKey " +
            "GROUP BY " +
            "store_name," +
            "cate_name," +
            "product_name, " +
            "drvn.product_down_total",
        resultSetMapping = "storeWithProductStats"
    )
})
@Entity
@Table(name="hcas_product_download_hist")
public class ProductDownloadHistory implements Serializable {

    private static final long serialVersionUID = -5049368913126335708L;

    @Id
    @GeneratedValue(generator = "product_download_hist_seq")
    @GenericGenerator(
        name = "product_download_hist_seq", strategy = "enhanced-sequence",
        parameters = {
            @Parameter(name = "sequence_name", value = "product_download_hist_seq"),
            @Parameter(name = "initial_value", value = "1"),
            @Parameter(name = "increment_size", value = "1")
        }
    )
    @Column(name="id")
    long id;

    @Column(name="store_id")
    long storeId;

    @Column(name="product_id")
    long productId;

    @CreatedDate
    @Column(name = "created_date", nullable = false, updatable = false)
    @JsonIgnore
    private Instant createdDate = Instant.now();

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public long getStoreId() {
        return storeId;
    }

    public void setStoreId(long storeId) {
        this.storeId = storeId;
    }

    public long getProductId() {
        return productId;
    }

    public void setProductId(long productId) {
        this.productId = productId;
    }

    public Instant getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(Instant createdDate) {
        this.createdDate = createdDate;
    }

}

@JsonInclude(JsonInclude.Include.NON_NULL)
public class ProductDownloadStatisticsDto {

    /**
     * outbound data
     */

